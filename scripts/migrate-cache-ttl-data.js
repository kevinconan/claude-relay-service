#!/usr/bin/env node

/**
 * ÁºìÂ≠òTTLÂéÜÂè≤Êï∞ÊçÆËøÅÁßªËÑöÊú¨
 * 
 * ËØ¥ÊòéÔºö
 * Áî±‰∫éÂéÜÂè≤Êï∞ÊçÆ‰∏≠Ê≤°ÊúâËÆ∞ÂΩïÁºìÂ≠òÁöÑTTL‰ø°ÊÅØÔºà‰πãÂâçÁ≥ªÁªü‰ºöÂà†Èô§TTLÂ≠óÊÆµÔºâÔºå
 * Âõ†Ê≠§Êó†Ê≥ïÂáÜÁ°ÆÂú∞Â∞ÜÂéÜÂè≤ÁºìÂ≠ò‰ΩøÁî®Êï∞ÊçÆÊåâÁÖß5ÂàÜÈíüÂíå1Â∞èÊó∂ËøõË°åÂàÜÁ±ª„ÄÇ
 * 
 * Êú¨ËÑöÊú¨Êèê‰æõ‰ª•‰∏ãÂäüËÉΩÔºö
 * 1. ÁªüËÆ°Áé∞ÊúâÁöÑÁºìÂ≠ò‰ΩøÁî®Êï∞ÊçÆ
 * 2. Â∞ÜÂéÜÂè≤ÁºìÂ≠òÊï∞ÊçÆÈªòËÆ§ÂΩíÁ±ª‰∏∫5ÂàÜÈíüÁºìÂ≠òÔºà‰øùÂÆà‰º∞ËÆ°Ôºâ
 * 3. ÁîüÊàêËøÅÁßªÊä•Âëä
 */

const Redis = require('ioredis');
const config = require('../config/config');
const logger = require('../src/utils/logger');

// Êó∂Âå∫ËæÖÂä©ÂáΩÊï∞
function getDateInTimezone(date = new Date()) {
  const offset = config.system.timezoneOffset || 8;
  const utcTime = date.getTime() + (date.getTimezoneOffset() * 60000);
  const targetTime = new Date(utcTime + (offset * 3600000));
  return targetTime;
}

function getDateStringInTimezone(date = new Date()) {
  const tzDate = getDateInTimezone(date);
  return `${tzDate.getFullYear()}-${String(tzDate.getMonth() + 1).padStart(2, '0')}-${String(tzDate.getDate()).padStart(2, '0')}`;
}

class CacheTTLMigration {
  constructor() {
    this.redis = null;
    this.stats = {
      keysProcessed: 0,
      accountsProcessed: 0,
      totalCacheTokens: 0,
      migratedRecords: 0,
      errors: 0
    };
  }

  async connect() {
    this.redis = new Redis({
      host: config.redis.host,
      port: config.redis.port,
      password: config.redis.password,
      db: config.redis.db
    });

    await this.redis.ping();
    logger.info('‚úÖ Connected to Redis');
  }

  async disconnect() {
    if (this.redis) {
      await this.redis.quit();
      logger.info('üëã Disconnected from Redis');
    }
  }

  // ÂàÜÊûêÁé∞ÊúâÁöÑÁºìÂ≠ò‰ΩøÁî®Êï∞ÊçÆ
  async analyzeExistingData() {
    logger.info('üìä Analyzing existing cache usage data...');

    // Ëé∑ÂèñÊâÄÊúâAPI KeyÁöÑÊó•ÁªüËÆ°
    const dailyKeys = await this.redis.keys('usage:daily:*');
    
    for (const key of dailyKeys) {
      try {
        const data = await this.redis.hgetall(key);
        const cacheCreateTokens = parseInt(data.cacheCreateTokens || 0);
        
        if (cacheCreateTokens > 0) {
          this.stats.totalCacheTokens += cacheCreateTokens;
          
          // ÊèêÂèñkeyIdÂíåÊó•Êúü
          const parts = key.split(':');
          const keyId = parts[2];
          const date = parts[3];
          
          // ÂàõÂª∫ÈªòËÆ§ÁöÑ5ÂàÜÈíüÁºìÂ≠òËÆ∞ÂΩïÔºà‰øùÂÆà‰º∞ËÆ°Ôºâ
          const cache5mKey = `usage:cache5m:daily:${keyId}:${date}`;
          const exists = await this.redis.exists(cache5mKey);
          
          if (!exists) {
            await this.redis.hset(cache5mKey, {
              tokens: cacheCreateTokens,
              requests: data.cacheRequests || data.requests || 1,
              migrated: 'true',
              migratedAt: new Date().toISOString()
            });
            
            // ËÆæÁΩÆËøáÊúüÊó∂Èó¥Ôºà‰∏éÂéüÊï∞ÊçÆ‰øùÊåÅ‰∏ÄËá¥Ôºâ
            const ttl = await this.redis.ttl(key);
            if (ttl > 0) {
              await this.redis.expire(cache5mKey, ttl);
            }
            
            this.stats.migratedRecords++;
            logger.debug(`‚úÖ Migrated cache data for ${keyId} on ${date}: ${cacheCreateTokens} tokens`);
          }
        }
        
        this.stats.keysProcessed++;
      } catch (error) {
        logger.error(`‚ùå Error processing key ${key}:`, error);
        this.stats.errors++;
      }
    }

    // Â§ÑÁêÜË¥¶Êà∑Á∫ßÂà´ÁöÑÁºìÂ≠òÊï∞ÊçÆ
    const accountDailyKeys = await this.redis.keys('account_usage:daily:*');
    
    for (const key of accountDailyKeys) {
      try {
        const data = await this.redis.hgetall(key);
        const cacheCreateTokens = parseInt(data.cacheCreateTokens || 0);
        
        if (cacheCreateTokens > 0) {
          // ÊèêÂèñaccountIdÂíåÊó•Êúü
          const parts = key.split(':');
          const accountId = parts[2];
          const date = parts[3];
          
          // ÂàõÂª∫ÈªòËÆ§ÁöÑ5ÂàÜÈíüÁºìÂ≠òËÆ∞ÂΩï
          const cache5mKey = `account_usage:cache5m:daily:${accountId}:${date}`;
          const exists = await this.redis.exists(cache5mKey);
          
          if (!exists) {
            await this.redis.hset(cache5mKey, {
              tokens: cacheCreateTokens,
              requests: data.cacheRequests || 1,
              migrated: 'true',
              migratedAt: new Date().toISOString()
            });
            
            // ËÆæÁΩÆËøáÊúüÊó∂Èó¥
            const ttl = await this.redis.ttl(key);
            if (ttl > 0) {
              await this.redis.expire(cache5mKey, ttl);
            }
            
            this.stats.migratedRecords++;
            logger.debug(`‚úÖ Migrated account cache data for ${accountId} on ${date}: ${cacheCreateTokens} tokens`);
          }
        }
        
        this.stats.accountsProcessed++;
      } catch (error) {
        logger.error(`‚ùå Error processing account key ${key}:`, error);
        this.stats.errors++;
      }
    }
  }

  // ÁîüÊàêËøÅÁßªÊä•Âëä
  generateReport() {
    const report = `
========================================
  ÁºìÂ≠òTTLÂéÜÂè≤Êï∞ÊçÆËøÅÁßªÊä•Âëä
========================================

ËøÅÁßªÊó∂Èó¥: ${new Date().toISOString()}

Â§ÑÁêÜÁªüËÆ°:
- API KeysÂ§ÑÁêÜÊï∞: ${this.stats.keysProcessed}
- Ë¥¶Êà∑Â§ÑÁêÜÊï∞: ${this.stats.accountsProcessed}
- ÊÄªÁºìÂ≠òTokenÊï∞: ${this.stats.totalCacheTokens.toLocaleString()}
- ËøÅÁßªËÆ∞ÂΩïÊï∞: ${this.stats.migratedRecords}
- ÈîôËØØÊï∞: ${this.stats.errors}

Ê≥®ÊÑè‰∫ãÈ°π:
1. Áî±‰∫éÂéÜÂè≤Êï∞ÊçÆ‰∏≠Ê≤°ÊúâTTL‰ø°ÊÅØÔºåÊâÄÊúâÂéÜÂè≤ÁºìÂ≠ò‰ΩøÁî®ÈÉΩË¢´ÂΩíÁ±ª‰∏∫5ÂàÜÈíüÁºìÂ≠ò
2. ËøôÊòØ‰øùÂÆà‰º∞ËÆ°ÔºåÂÆûÈôÖÂèØËÉΩÊúâÈÉ®ÂàÜÊòØ1Â∞èÊó∂ÁºìÂ≠ò
3. ‰ªéËøÅÁßªÂÆåÊàêÂêéÔºåÊñ∞ÁöÑÊï∞ÊçÆÂ∞ÜÂáÜÁ°ÆËÆ∞ÂΩïTTLÁ±ªÂûã
4. ËøÅÁßªÁöÑÊï∞ÊçÆÂ∑≤Ê†áËÆ∞migrated=trueÔºåÈÅøÂÖçÈáçÂ§çËøÅÁßª

Âª∫ËÆÆ:
- ÁõëÊéßÊñ∞Êï∞ÊçÆÁöÑTTLÂàÜÂ∏ÉÊÉÖÂÜµ
- Ê†πÊçÆÂÆûÈôÖ‰ΩøÁî®ÊÉÖÂÜµË∞ÉÊï¥ËÆ°Ë¥πÁ≠ñÁï•
- ËÄÉËôë‰∏∫Áî®Êà∑Êèê‰æõTTL‰ΩøÁî®Êä•Âëä

========================================
`;

    return report;
  }

  async run() {
    try {
      logger.info('üöÄ Starting cache TTL data migration...');
      
      await this.connect();
      await this.analyzeExistingData();
      
      const report = this.generateReport();
      console.log(report);
      
      // ‰øùÂ≠òÊä•ÂëäÂà∞Êñá‰ª∂
      const fs = require('fs');
      const reportPath = `./migration-report-${Date.now()}.txt`;
      fs.writeFileSync(reportPath, report);
      logger.info(`üìÑ Report saved to: ${reportPath}`);
      
    } catch (error) {
      logger.error('üí• Migration failed:', error);
      throw error;
    } finally {
      await this.disconnect();
    }
  }
}

// ËøêË°åËøÅÁßª
if (require.main === module) {
  const migration = new CacheTTLMigration();
  
  // Ê∑ªÂä†ÂëΩ‰ª§Ë°åÂèÇÊï∞ÊîØÊåÅ
  const args = process.argv.slice(2);
  const dryRun = args.includes('--dry-run');
  
  if (dryRun) {
    logger.info('üîç Running in DRY-RUN mode (no changes will be made)');
  }
  
  migration.run()
    .then(() => {
      logger.success('‚úÖ Migration completed successfully');
      process.exit(0);
    })
    .catch(error => {
      logger.error('‚ùå Migration failed:', error);
      process.exit(1);
    });
}

module.exports = CacheTTLMigration;